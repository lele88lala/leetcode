Given a 32-bit signed integer, reverse digits of an integer.

Example 1:

Input: 123
Output: 321

Example 2:

Input: -123
Output: -321

Example 3:

Input: 120
Output: 21

Note:
Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.


```
/**
 * @param {number} x
 * @return {number}
 */
var reverse = function(x) {
            var nagtive = 1

            if (x < -Math.pow(2,31) || x > Math.pow(2,31)-1) {
                return 0
            } 
            if (parseInt(x) < 0) {
                nagtive = -1
                x = -x
            } else {
            }
            var y = x % 10
            while (parseInt(x / 10) != 0) {
                x = parseInt(x / 10)
                y = y * 10
                y = y + x % 10
            }
            if (y < -Math.pow(2,31) || y > Math.pow(2,31)-1) {
                return 0
            } 

            return y * nagtive

};